//file:noinspection GroovyAssignabilityCheck
//file:noinspection GroovyAccessibility
//file:noinspection GradlePackageVersionRange
plugins {
	id "fabric-loom" version "1.4.+"
	id "maven-publish"
	id "me.modmuss50.mod-publish-plugin" version "0.3.5"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group
version = mod_version

repositories {
	maven { url = "https://maven.shedaniel.me/" } // Cloth Config, REI
	maven { url = "https://maven.blamejared.com/" } // JEI
	maven { url = "https://maven.parchmentmc.org" } // Parchment mappings
	maven { url = "https://maven.quiltmc.org/repository/release" } // Quilt Mappings
	maven { url = "https://api.modrinth.com/maven" } // LazyDFU
	maven { url = "https://maven.terraformersmc.com/releases/" } // Mod Menu
	maven { url = "https://mvn.devos.one/snapshots/" } // Create, Porting Lib, Forge Tags, Milk Lib, Registrate
	maven { url = "https://cursemaven.com" } // Forge Config API Port
	maven { url = "https://maven.jamieswhiteshirt.com/libs-release" } // Reach Entity Attributes
	maven { url = "https://jitpack.io/" } // Mixin Extras, Fabric ASM
	maven { url = "https://maven.tterrag.com/" } // Flywheel
	maven { url = "https://maven.dragons.plus/releases" } // DragonLib
	maven { url = "https://maven.dragons.plus/snapshots" } // DragonLib snapshot
	mavenLocal() // Fast test
}

loom {
	accessWidenerPath = file("src/main/resources/create_enchantment_industry.accesswidener")
	sourceSets {
		main {
			resources {
				srcDir("src/generated/resources")
				exclude("src/generated/resources/.cache")
			}
		}
	}

	runs {
		datagen {
			client()

			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
			vmArg "-Dfabric-api.datagen.modid=create_enchantment_industry"
			vmArg "-Dporting_lib.datagen.existing_resources=${file("src/main/resources")}"
		}

		server {
			runDir "run/server"
		}
	}
}

dependencies {
	// Setup
	minecraft("com.mojang:minecraft:${minecraft_version}")
	mappings(loom.layered {
		//it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
		it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
		it.officialMojangMappings { nameSyntheticMembers = false }
	})
	modImplementation("net.fabricmc:fabric-loader:${fabric_loader_version}")

	// dependencies
	modImplementation("net.fabricmc.fabric-api:fabric-api:${fabric_api_version}")

	// Create - dependencies are added transitively
	modImplementation("maven.modrinth:create-fabric-dme-edition:${create_version}")
    modApi("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${port_lib_version}+1.20-entity-refactor")



	// Create Dragon Lib
	include(modImplementation("plus.dragons.createdragonlib:create_dragon_lib-fabric-${minecraft_version}:${dragonlib_version}"){
		transitive = false
	})

	// Development QOL
	modLocalRuntime("maven.modrinth:lazydfu:${lazydfu_version}")
	modLocalRuntime("com.terraformersmc:modmenu:${modmenu_version}")

	// Recipe Viewers - Create Fabric supports JEI, REI, and EMI.
	// See root gradle.properties to choose which to use at runtime.
	switch (recipe_viewer.toLowerCase(Locale.ROOT)) {
		case "jei": modLocalRuntime("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}"); break
		case "rei": modLocalRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${rei_version}"); break
		case "emi": modLocalRuntime("dev.emi:emi:${emi_version}"); break
		case "disabled": break
		default: println("Unknown recipe viewer specified: ${recipe_viewer}. Must be JEI, REI, EMI, or disabled.")
	}
	// if you would like to add integration with them, uncomment them here.
    modCompileOnly("mezz.jei:jei-${minecraft_version}-fabric:${jei_version}")
    modCompileOnly("mezz.jei:jei-${minecraft_version}-common:${jei_version}")
//    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${rei_version}")
//    modCompileOnly("me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${rei_version}")
//    modCompileOnly("dev.emi:emi:${emi_version}")
}

processResources {
	// require dependencies to be the version compiled against or newer
	Map<String, String> properties = new HashMap<>()
	properties.put("version", version)
	properties.put("fabric_loader_version", fabric_loader_version)
	properties.put("fabric_api_version", fabric_api_version)
	properties.put("create_version", create_version)
	properties.put("minecraft_version", minecraft_version)

	properties.forEach((k, v) -> inputs.property(k, v))

	filesMatching("fabric.mod.json") {
		expand properties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = Integer.parseInt(sourceCompatibility)
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

publishMods {
	file = remapJar.archiveFile
	changelog = new File("changelog/${mod_version}.md").text
	version = mod_version
	type = STABLE
	displayName = "CEI ${mod_version} for Create ${minecraft_version}-${create_version}"
	modLoaders.add("fabric")
	modLoaders.add("quilt")

	curseforge {
		projectId = "876129"
		accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
		minecraftVersions.add(minecraft_version)

		requires {
			slug = "create-fabric"
			slug = "fabric-api"
		}
	}

	modrinth {
		projectId = "AEZO385x"
		accessToken = providers.environmentVariable("MODRINTH_TOKEN")
		minecraftVersions.add(minecraft_version)

		requires {
			slug = "create-fabric"
			slug = "fabric-api"
		}
	}
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
